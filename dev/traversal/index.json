[
	{	"id": "element_getancestors",
		"name": ".getAncestors",
		"namehtml": "<tt>HTMLElement.getAncestors()</tt>",
		"type": "prototype",
		"desc": "Get an array of ancestors, possibly filtered via a callback function",
		"file": "Element.getAncestors",
		"requires": [],
		"conflics": [],
		"moreinfo": "toolbox/traversal/getancestors/index"
	},
	{	"id": "element_getsiblings",
		"name": ".getSiblings",
		"namehtml": "<tt>HTMLElement.getSiblings()</tt>",
		"type": "prototype",
		"desc": "Get an array of siblings (without the element itself), possibly filtered via a callback function",
		"file": "Element.getSiblings",
		"requires": [],
		"conflics": [],
		"moreinfo": "toolbox/traversal/getsiblings/index"
	},
	{	"id": "element_getchildren",
		"name": ".getChildren",
		"namehtml": "<tt>HTMLElement.getChildren()</tt>",
		"type": "prototype",
		"desc": "Get an array of immediate child elements, possibly filtered via a callback function",
		"file": "Element.getChildren",
		"requires": [],
		"conflics": [],
		"moreinfo": "toolbox/traversal/getchildren/index"
	},
	{	"id": "element_getdescendants",
		"name": ".getDescendants",
		"namehtml": "<tt>HTMLElement.getDescendants()</tt>",
		"type": "prototype",
		"desc": "Get an array of descendant elements, possibly filtered via a callback function",
		"file": "Element.getDescendants",
		"requires": [],
		"conflics": [],
		"moreinfo": "toolbox/traversal/getdescendants/index"
	}
]